// Import createSlice from Redux Toolkit to simplify Redux boilerplate
import { createSlice } from "@reduxjs/toolkit";

// Create a Redux slice for managing todos
const todoSlice = createSlice({
  // Name of the slice, used to identify it in the Redux store (e.g., state.todos)
  name: "todos",
  
  // Initial state of the slice, an empty array to hold the list of todos
  initialState: [],
  
  // Define reducers (functions) to handle state changes based on dispatched actions
  reducers: {
    // Reducer to set the entire todo list (e.g., after fetching from API)
    setTodos: (state, action) => {
      // Replace the current state with the new array of todos from the action payload
      // action.payload is expected to be an array of todo objects
      return action.payload;
    },
    
    // Reducer to add a new todo to the list
    addTodo: (state, action) => {
      // Append the new todo (from action.payload) to the end of the current state array
      // action.payload is expected to be a single todo object
      state.push(action.payload);
    },
    
    // Reducer to update an existing todo in the list
    updateTodo: (state, action) => {
      // Find the index of the todo to update by matching its renderKey with the payload's renderKey
      // renderKey is a unique identifier for each todo, used instead of id to ensure uniqueness
      const index = state.findIndex(
        (todo) => todo.renderKey === action.payload.renderKey
      );
      
      // Check if a matching todo was found (index !== -1 means it exists)
      if (index !== -1) {
        // Update the todo at the found index by merging the existing todo with the new data
        // Spread operator (...state[index]) preserves existing properties, overwritten by action.payload
        state[index] = { ...state[index], ...action.payload };
      }
      // If no match is found (index === -1), do nothing (silently ignore)
    },
    
    // Reducer to remove a todo from the list
    removeTodo: (state, action) => {
      // Filter out the todo whose renderKey matches the payload
      // action.payload is expected to be the renderKey (string) of the todo to remove
      // Returns a new array excluding the matching todo, updating the state
      return state.filter((todo) => todo.renderKey !== action.payload);
    },
  },
});

// Export the action creators generated by createSlice
// These are functions used to dispatch actions (e.g., dispatch(setTodos(todos)))
export const { setTodos, addTodo, updateTodo, removeTodo } = todoSlice.actions;

// Export the reducer function as the default export
// This will be combined with other reducers in the Redux store configuration
export default todoSlice.reducer;